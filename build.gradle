plugins {
	id 'org.springframework.boot' version '3.5.5'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'java'
	id 'com.palantir.git-version' version '4.0.0'
	id "org.flywaydb.flyway" version "11.13.0"
	id "com.github.eirnym.js2p" version "1.0"
	id 'jacoco'
	id "com.diffplug.spotless" version "7.2.1"
	id "org.sonarqube" version "6.3.1.5724"
}

group = 'rocks.curium'
version = gitVersion().replace(".dirty", "-dirty")
sourceCompatibility = '17'
targetCompatibility = '17'

ext {
	springDocVersion = "2.8.13"
	mitreTaxiiVersion = '1.1.0.1'
	mitreStixVersion = '1.2.0.2'
	junitVersion = '5.9.1'
	awaitiliyVersion = '4.3.0'
	okhttpVersion = '5.1.0'
	javaxPersistenceVersion = '2.2'
	javaxValidationVersion = '3.1.1'
}


configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

allprojects {
	repositories {
		jcenter()
		maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
	}
	gradle.projectsEvaluated {
		tasks.withType(JavaCompile) {
			options.compilerArgs << "-Xlint:-processing" << "-Werror"
		}
	}
	test.useTestNG()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.kafka:spring-kafka'
	implementation 'org.springframework.boot:spring-boot-starter-quartz'
	implementation group: 'org.springdoc', name: 'springdoc-openapi', version: springDocVersion
	implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: springDocVersion
	implementation group: 'org.mitre.taxii', name: 'taxii', version: mitreTaxiiVersion
	implementation group: 'org.mitre', name: 'stix', version: mitreStixVersion
	implementation group: 'javax.persistence', name: 'javax.persistence-api', version: javaxPersistenceVersion
	implementation group: 'jakarta.validation', name: 'jakarta.validation-api', version: javaxValidationVersion
	implementation 'org.postgresql:postgresql'
	implementation 'org.flywaydb:flyway-core'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation group: 'com.squareup.okhttp3', name: 'okhttp', version: okhttpVersion
	testImplementation group: 'com.squareup.okhttp3', name: 'mockwebserver', version: okhttpVersion
	testImplementation group: 'org.awaitility', name: 'awaitility', version: awaitiliyVersion
}

jar {
	manifest {
		attributes 'Main-class': 'rocks.curium.MitreSiphonApplication'
	}
}

tasks.named('test') {
	useJUnitPlatform()
	jacoco {
		excludes = ['*generated*']
	}
	finalizedBy jacocoTestReport
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.enabled true
		xml.destination file("${buildDir}/reports/jacoco/report.xml")
		html.enabled false
		csv.enabled false
	}
}

sourceSets {
	main {
		java {
			srcDirs = [
				"src/main/java",
				"src/generated/java"
			]
		}
	}
}

javadoc {
	exclude  "rocks/curium/mitresiphon/generated/models"
	source = sourceSets.main.allJava
}

task versionFile()  {
	doLast {
		def folder = new File(buildDir.toPath().toString())
		if( !folder.exists() ) {
			folder.mkdirs()
		}
		new File(buildDir, "VERSION").text = project.version
	}
}

flyway {
	url = 'jdbc:postgresql://localhost:5432/mitre'
	user = 'postgres'
	password = 'postgres'
	baselineOnMigrate = true
}


jsonSchema2Pojo {
	includeAdditionalProperties = false
	generateBuilders = false
	usePrimitives = false
	source = files("${sourceSets.main.output.resourcesDir}/json")
	targetDirectory = file("${project.rootDir}/src/generated/java")
	targetPackage = 'rocks.curium.mitresiphon.generated.models'
	propertyWordDelimiters = [] as char[]
	useLongIntegers = false
	useBigIntegers = false
	useDoubleNumbers = true
	useBigDecimals = false
	includeHashcodeAndEquals = true
	includeToString = true
	annotationStyle = 'jackson2'
	customAnnotator = 'org.jsonschema2pojo.NoopAnnotator'
	includeJsr303Annotations = false
	sourceType = 'jsonschema'
	removeOldOutput = false
	outputEncoding = 'UTF-8'
	useJodaDates = false
	formatDateTimes = true
	formatDates = true
	formatTimes = true
	initializeCollections = true
	classNamePrefix = ""
	classNameSuffix = ""
	fileExtensions = [] as String[]
	includeConstructors = false
	parcelable = false
	serializable = true
	includeGetters = true
	includeSetters = true
	includeDynamicAccessors = false
	includeDynamicGetters = false
	includeDynamicSetters = false
	includeDynamicBuilders = false
	dateType = "java.time.LocalDate"
	dateTimeType = "java.time.LocalDateTime"
}

spotless {
	java {
		target 'src/main/**/*.java', 'src/test/**/*.java'
		importOrder()
		removeUnusedImports()
		googleJavaFormat()
		formatAnnotations()
	}
	groovyGradle {
		target '*.gradle'
		greclipse()
	}
}

sonarqube {
	properties {
		property "sonar.projectKey", "curium-rocks_mitre-siphon"
		property "sonar.organization", "curium-rocks"
		property "sonar.host.url", "https://sonarcloud.io"
	}
}